#pragma once
#include<iostream>
#include<cmath>
using namespace std;

class fraction
{

private:

int numenator;
int denumenator;
//int numenator[2]; // for checking [] operator
//int *ptr; // for checking ->* operator
public:

int Gcd(int num,int denum)
{
if(num % denum == 0)
return denum;
else
return Gcd(denum,num % denum);
}
fraction()
{
numenator = 0;
denumenator = 1;
}
fraction(int numer)
{
numenator = numer;
denumenator = 1;
}
fraction(int numer, int denum) // set both numenator and denumenator in lowest term form
{
this->numenator = numer/Gcd(numer,denum);
this->denumenator = denum/Gcd(numer,denum);
}
/*fraction(int* ptrr) // for checking ->* operator
{
this->ptr = ptrr;
}
fraction(int numer1,int numer2) // for checking [] operator
{
numenator[0] = numer1;
numenator[1] = numer2;
}*/
fraction(fraction& other) //copy constructor
{
numenator = other.numenator;
denumenator = other.denumenator;
}
int getnum() const
{
return numenator;
}
int getdenum() const
{
return denumenator;
}
void display() const
{
cout<<numenator<<"/"<<denumenator;
cout<<endl;
}

/*int getpointer() const // for checking ->* operator
{
return ptr;
}
int setpointer(int* ptrrr) // for checking ->* operator
{
ptr = ptrrr;
}
void d2() const{ // for checking [] operator
cout<<"Numenator 1 "<<numenator[0]<<endl;
cout<<"Numenator 2 "<<numenator[1]<<endl;
}*/

fraction operator+(fraction &other)
{
fraction temp;
if(denumenator == other.denumenator)
{
temp.numenator = numenator + other.numenator ;
temp.denumenator = denumenator ;
}
else
{
temp.numenator = numenator * other.denumenator + other.numenator * denumenator;
temp.denumenator = denumenator * other.denumenator;
}

temp.numenator = temp.numenator / Gcd(temp.numenator, temp.denumenator);
temp.denumenator = temp.denumenator / Gcd(temp.numenator, temp.denumenator);

return temp;
}

fraction operator-(fraction &other)
{
fraction temp;
if(denumenator == other.denumenator)
{
temp.numenator = numenator  - other.numenator ;
temp.denumenator = denumenator ;
}
else
{
temp.numenator = numenator * other.denumenator - other.numenator * denumenator;
temp.denumenator = denumenator * other.denumenator;
}

temp.numenator = temp.numenator / Gcd(temp.numenator, temp.denumenator);
temp.denumenator = temp.denumenator / Gcd(temp.numenator, temp.denumenator);

return temp;
}

fraction operator*(fraction &other)
{
fraction temp;
temp.numenator = numenator * other.numenator;
temp.denumenator = denumenator * other.denumenator;

temp.numenator = temp.numenator / Gcd(temp.numenator, temp.denumenator);
temp.denumenator = temp.denumenator / Gcd(temp.numenator, temp.denumenator);

return temp;
}
fraction operator/(fraction &other)
{
fraction temp;
temp.numenator = numenator * other.denumenator;
temp.denumenator = denumenator * other.numenator;

temp.numenator = temp.numenator / Gcd(temp.numenator, temp.denumenator);
temp.denumenator = temp.denumenator / Gcd(temp.numenator, temp.denumenator);

return temp;
}
void operator+=(fraction &other)
{
fraction temp;
if(denumenator == other.denumenator)
{
temp.numenator = numenator + other.numenator ;
denumenator = denumenator ;
}
else
{
temp.numenator = numenator * other.denumenator + other.numenator * denumenator;
denumenator = denumenator * other.denumenator;
}

numenator = temp.numenator;
display();
numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}
void operator-=(fraction &other)
{

if(denumenator == other.denumenator)
{
numenator = numenator - other.numenator ;
denumenator = denumenator ;
}
else
{
numenator = numenator * other.denumenator - other.numenator * denumenator;
denumenator = denumenator * other.denumenator;
}
display();
numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}

void operator*=(fraction &other)
{
fraction temp;

temp.numenator = numenator * other.numenator;
denumenator = denumenator * other.denumenator;
numenator = temp.numenator;
display();
numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}
void operator/=(fraction &other)
{
fraction temp;

temp.numenator = numenator * other.denumenator;
denumenator = denumenator * other.numenator;

numenator = temp.numenator;
display();
numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}

friend ostream& operator<<(ostream &output,fraction &other);
friend istream& operator>>(istream &input,fraction &other);

bool operator==(fraction &other)
{
if(numenator == other.numenator && denumenator == other.denumenator)
{
return 1;
}
else return 0;
}
bool operator!=(fraction &other)
{
if(numenator != other.numenator || denumenator != other.denumenator)
{
return 0;
}
else return 1;
}
bool operator<(fraction &other)
{
if(denumenator == other.denumenator)
{
if(numenator < other.numenator )
{
return 1;
}
}
else if (numenator * other.denumenator < denumenator * other.numenator)
{
return 1;
}
else return 0;
}
bool operator>(fraction &other)
{
if(denumenator == other.denumenator)
{
if(numenator > other.numenator )
{
return 1;
}
}
else if (numenator * other.denumenator > denumenator * other.numenator)
{
return 1;
}
else return 0;
}
bool operator<=(fraction &other)
{
if(denumenator == other.denumenator)
{
if(numenator <= other.numenator )
{
return 1;
}
}
else if (numenator * other.denumenator <= denumenator * other.numenator)
{
return 1;
}
else return 0;
}
bool operator>=(fraction &other)
{
if(denumenator == other.denumenator)
{
if(numenator >= other.numenator )
{
return 1;
}
}
else if (numenator * other.denumenator >= denumenator * other.numenator)
{
return 1;
}
else return 0;
}
// int &operator[](int pos);
void operator++()
{
numenator = numenator + 1 * denumenator;
denumenator = denumenator * 1;


numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}
void operator--()
{
numenator = numenator - 1 * denumenator;
denumenator = denumenator * 1;

numenator = numenator / Gcd(numenator, denumenator);
denumenator = denumenator / Gcd(numenator, denumenator);
}
fraction operator()(int a,int b)
{
numenator = a;
denumenator = b;

return *this;
}
fraction* operator&()
{
return this;
}
fraction* operator->()
{
return this;
}
//int operator->*(fraction *ptr2);

friend bool operator&&(fraction &obj1,fraction &obj2);
friend bool operator||(fraction &obj1,fraction &obj2);

};


istream& operator>>(istream &input,fraction &other)
{
cout<<" Enter Numenator : ";
input>>other.numenator;
cout<<endl;
cout<<" Enter Denumenator : ";
input>>other.denumenator;
cout<<endl;

return input;
}
ostream& operator<<(ostream &output,fraction &other)
{
output<<other.numenator<<"/"<<other.denumenator;
output<<endl;

return output;
}
bool operator&&(fraction &obj1,fraction &obj2)
{
return (obj1.numenator == obj2.numenator && obj1.denumenator == obj2.denumenator );
}
bool operator||(fraction &obj1,fraction &obj2)
{
return (obj1.numenator == obj2.numenator || obj1.denumenator == obj2.denumenator );

}

int main()
{
cout<<"\nALL PARTS COMPLETED!\n"<<endl;
fraction f1(2,5), f2(1,13);
cout<<f1;
cout<<f2;
cout<<"Is f1>f2?"<<endl;
if (f1>f2){
cout<<"\ntrue"<<endl;
}
else
cout<<"\nfalse"<<endl;
cout<<"\n--f1"<<endl;
--f1;
cout<<f1;
fraction temp;
cin>>temp;
cout<<temp;
cout<<"TEMP-=f2"<<endl;
temp-=f2;
//cout<<temp;
cout<<"TEMP+=f2"<<endl;
temp+=f2;
//cout<<temp;
cout<<"TEMP*=f2"<<endl;
temp*=f2;
//cout<<temp;
cout<<"TEMP/=f2"<<endl;
temp/=f2;
//cout<<temp;
return 0;
}
